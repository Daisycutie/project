import streamlit as st


def page_page2():
    st.title("**Neural Network**")
    st.markdown("""
    ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡πá‡∏ö Kaggle ‚û°Ô∏è 
    [**Fer2013 Facial Expression Recognition Dataset**](https://www.kaggle.com/datasets/xavier00/fer2013-facial-expression-recognition-dataset)
    """, unsafe_allow_html=True)

    st.subheader("‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö")
    st.markdown("""
        ‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå  ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥‡∏Ç‡∏ô‡∏≤‡∏î 48x48 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• ‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô 7 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà
        - **Angry** (‡πÇ‡∏Å‡∏£‡∏ò)  üò°
        - **Disgust** (‡∏£‡∏±‡∏á‡πÄ‡∏Å‡∏µ‡∏¢‡∏à)  ü§¢
        - **Fear** (‡∏Å‡∏•‡∏±‡∏ß)  üò®
        - **Happy** (‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç)  üòÑ
        - **Neutral** (‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á)  üòê
        - **Sad** (‡πÄ‡∏®‡∏£‡πâ‡∏≤)  üò≠
        - **Surprise** (‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î‡πÉ‡∏à) üòÆ
    """)
    
    st.subheader("Feature")
    st.write("""
    ‡∏°‡∏µ 2 Feature ‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö CSV File ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà

    1. **emotion** ‚Üí ‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
        - ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ‡πà‡∏≤‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö (Label) ‡∏ó‡∏µ‡πà‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏≠‡∏∞‡πÑ‡∏£
        - ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î 7 ‡∏Ñ‡πà‡∏≤ ‡πÅ‡∏ó‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
        - 0 ‚Üí Angry (‡πÇ‡∏Å‡∏£‡∏ò)
        - 1 ‚Üí Disgust (‡∏£‡∏±‡∏á‡πÄ‡∏Å‡∏µ‡∏¢‡∏à)
        - 2 ‚Üí Fear (‡∏Å‡∏•‡∏±‡∏ß)
        - 3 ‚Üí Happy (‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç)
        - 4 ‚Üí Neutral (‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á)
        - 5 ‚Üí Sad (‡πÄ‡∏®‡∏£‡πâ‡∏≤)
        - 6 ‚Üí Surprise (‡∏õ‡∏£‡∏∞‡∏´‡∏•‡∏≤‡∏î‡πÉ‡∏à)

    2. **pixels** ‚Üí ‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        - ‡πÄ‡∏õ‡πá‡∏ô ‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ 0 - 255 (Grayscale)
        - ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î 48 √ó 48  ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•
    """)

    st.subheader("‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤")
    
     #data preprocessing
    code = """
        data.head()
    """
    st.code(code, language="python")
    st.write("""
    ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    """)
    
    
    #data preprocessing
    code = """
        X = np.array([np.fromstring(img, dtype=int, sep=' ').reshape(48, 48) for img in data['pixels']])
        y = data['emotion'].values
    """
    st.code(code, language="python")
    st.write("""
    X ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏û (‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ü‡∏µ‡∏•‡∏î‡πå pixels) ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÇ‡∏î‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î 48x48 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•.
    y ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö (label) ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏≤‡∏û
    """)
    
    #‡πåNormalization
    code = """
        X = X / 255.0

    """
    st.code(code, language="python")
    st.write("""
        ‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡πÉ‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á 0-255. ‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Normalize (‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î) ‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1 ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•‡∏î‡πâ‡∏ß‡∏¢ 255
    """)
    
    #CNN
    code = """
    X = X.reshape(-1, 48, 48, 1)

    """
    st.code(code, language="python")
    st.write("""
    CNN (Convolutional Neural Networks) ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡πÄ‡∏õ‡πá‡∏ô 4D Array (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á, ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ).
    ‡πÉ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î 48x48 ‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏• ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û Grayscale (‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥) ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏µ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 1
    """)
    
    #data preprocessing
    code = """
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    """
    st.code(code, language="python")
    st.write("""
        ‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô:
        - Training Data (80% ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
        - Testing Data (20% ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
        ‡πÉ‡∏ä‡πâ train_test_split ‡∏à‡∏≤‡∏Å‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ scikit-learn ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡πà‡∏° (random)
    """)
    
    # ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á Labels 
    code = """
        y_train = to_categorical(y_train, num_classes=7)
        y_test = to_categorical(y_test, num_classes=7)

    """
    st.code(code, language="python")
    st.write("""
        ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ labels ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô One-hot encoding (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 7 ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå ‡πÄ‡∏ä‡πà‡∏ô Happy, Sad, Fear, ‡∏Ø‡∏•‡∏Ø).
        ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡∏ù‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö One-hot (‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏ó‡∏ô Happy ‡∏î‡πâ‡∏ß‡∏¢ [0, 0, 0, 1, 0, 0, 0])
    """)
    #‡∏™‡∏£‡πâ‡∏≤‡∏ámodel
    code = """
        model = Sequential([
            Conv2D(32, (3,3), activation='relu', input_shape=(48,48,1)),
            MaxPooling2D(2,2),
            Conv2D(64, (3,3), activation='relu'),
            MaxPooling2D(2,2),
            Conv2D(128, (3,3), activation='relu'),
            MaxPooling2D(2,2),
            Flatten(),
            Dense(128, activation='relu'),
            Dropout(0.5),
            Dense(7, activation='softmax')
        ])

    """
    st.code(code, language="python")
    st.write("""
    ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏∑‡∏≠ Convolutional Neural Network (CNN) ‡∏ã‡∏∂‡πà‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå Conv2D (‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏û) ‡πÅ‡∏•‡∏∞ MaxPooling2D (‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û)
    Conv2D ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏≠‡∏ö ‡∏´‡∏£‡∏∑‡∏≠ ‡∏£‡∏π‡∏õ‡∏ó‡∏£‡∏á
    MaxPooling2D ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πà‡∏≠‡∏•‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô)
    ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢
    3 ‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå Convolutional ‡πÅ‡∏•‡∏∞ MaxPooling.
    - Flatten ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡πà‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•.
    - Dense ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏ä‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•.
    - Dropout ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Overfitting.
    - Softmax ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå (7 ‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå)
    """)
    
    #Compile Model
    code = """
        model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

    """
    st.code(code, language="python")
    st.write("""
    ‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ Adam Optimizer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å.
    ‡πÉ‡∏ä‡πâ categorical_crossentropy ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢ (Loss function) ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏•‡∏≤‡∏™
    ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì accuracy ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•.
    """)
    
    #Model Training
    code = """
    history = model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=15, batch_size=64)

    """
    st.code(code, language="python")
    st.write("""
        ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏∂‡∏Å X_train ‡πÅ‡∏•‡∏∞ y_train.
        ‡πÄ‡∏£‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Å‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• X_test ‡πÅ‡∏•‡∏∞ y_test ‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ epoch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        Epochs ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ù‡∏∂‡∏Å ‡πÅ‡∏•‡∏∞ Batch size ‡∏Ñ‡∏∑‡∏≠‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏°‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö
    """)
    
    #‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•
    code = """
    test_loss, test_acc = model.evaluate(X_test, y_test, verbose=2)

    """
    st.code(code, language="python")
    st.write("""
        ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö X_test ‡πÅ‡∏•‡∏∞ y_test.
        ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ test_acc ‡∏ã‡∏∂‡πà‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    """)
    
    #‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•
    code = """
    pred = model.predict(sample_image)
    predicted_emotion = np.argmax(pred)

    """
    st.code(code, language="python")
    st.write("""
       ‡πÄ‡∏£‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤.
       ‡πÉ‡∏ä‡πâ np.argmax(pred) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏•‡∏≤‡∏™‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÑ‡∏î‡πâ)
    """)
    
     #‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    code = """
    plt.imshow(X_test[index].reshape(48, 48), cmap="gray")
    plt.title(f"Predicted Emotion: {emotions[predicted_emotion]}")
    plt.show()


    """
    st.code(code, language="python")
    st.write("""
       ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå ‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    """)
